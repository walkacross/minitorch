#pragma once

#include <ATen/core/TensorBase.h>

namespace at {

class Tensor: public TensorBase {
public:
    Tensor() = default;
    // This constructor should not be used by end users and is an implementation
    // detail invoked by autogenerated code.
    explicit Tensor(c10::intrusive_ptr<c10::TensorImpl> tensor_impl): TensorBase(std::move(tensor_impl)) {}
    Tensor(const Tensor &tensor) = default;
    Tensor(Tensor &&tensor) = default;


    //Tensor index(ArrayRef<at::indexing::TensorIndex> indices) const;
    //Tensor index(std::initializer_list<at::indexing::TensorIndex> indices) const;


    // STOP.  Thinking of adding a method here, which only makes use
    // of other ATen methods?  Define it in native_functions.yaml.

    //example
    //Tensor * add(Tensor & b);
    //${tensor_method_declarations}
    //at::Tensor as_strided(at::IntArrayRef size, at::IntArrayRef stride, std::optional<int64_t> storage_offset=std::nullopt) const;
};

namespace detail {
// Helper creator for Tensor class which doesn't requires the users to pass
// in an intrusive_ptr instead it just converts the argument passed to
// requested intrusive_ptr type.
        template <typename T, typename... Args>
        Tensor make_tensor(Args&&... args) {
            return Tensor(c10::make_intrusive<T>(std::forward<Args>(args)...));
        }

    } // namespace detail

} //namespace at

//namespace at {

// aten::as_strided(Tensor(a) self, SymInt[] size, SymInt[] stride, SymInt? storage_offset=None) -> Tensor(a)
//inline at::Tensor Tensor::as_strided(at::IntArrayRef size, at::IntArrayRef stride, std::optional <int64_t> storage_offset) const {
//        return at::_ops::as_strided::call(const_cast<Tensor &>(*this), c10::fromIntArrayRefSlow(size),
//                                          c10::fromIntArrayRefSlow(stride),
//                                          storage_offset.has_value() ? std::make_optional(c10::SymInt(*storage_offset))
//                                                                     : std::nullopt);
//    }
//} //namespace at